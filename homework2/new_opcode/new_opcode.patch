From 86b66c5dbd433acb09eae75c96931d7b32f7472d Mon Sep 17 00:00:00 2001
From: Dridger Vitaly <dridgervitalik@gmail.com>
Date: Tue, 5 Dec 2017 04:58:03 +0000
Subject: [PATCH 3486/3486] new_opcode

---
 Include/opcode.h        |  2 ++
 Lib/opcode.py           |  3 ++-
 Python/ceval.c          | 17 +++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       | 10 ++++++++++
 5 files changed, 32 insertions(+), 2 deletions(-)

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed5487..91d9f52 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -159,6 +159,8 @@ extern "C" {
 #define SET_ADD         146
 #define MAP_ADD         147

+/* custom opcode*/
+#define LOAD_OTUS       148

 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365..5057e5a 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -188,5 +188,6 @@ def_op('EXTENDED_ARG', 145)
 EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
-
+# custom opcode
+def_op('LOAD_OTUS', 148)
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index 4e4adc2..38818e7 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1232,6 +1232,23 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             FAST_DISPATCH();
         }

+	TARGET(LOAD_OTUS)
+	{
+	  x = GETLOCAL(0);
+	  if (x != NULL) {
+	    Py_INCREF(x);
+	    PUSH(x);
+	    x = GETITEM(consts, oparg);
+	    Py_INCREF(x);
+	    PUSH(x);
+	    FAST_DISPATCH();
+	  }
+	  format_exc_check_arg(PyExc_UnboundLocalError,
+	      UNBOUNDLOCAL_ERROR_MSG,
+	      PyTuple_GetItem(co->co_varnames, oparg));
+	  break;
+	}
+
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
         {
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127..8c29b98 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f88..c212b17 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -410,6 +410,16 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 SETARG(codestr, i, j);
                 cumlc = lastlc + 1;
                 break;
+
+		/* LOAD_FAST LOAD_CONST -> LOAD_OTUS NOP */
+	    case LOAD_FAST:
+	        j = GETARG(codestr, i);
+	        if (codestr[i+3] == LOAD_CONST &&
+	            j == 0) {
+	            codestr[i+3] = LOAD_OTUS;
+	            memset(codestr+i, NOP, 3);
+	        }
+	        break;

                 /* Skip over LOAD_CONST trueconst
                    POP_JUMP_IF_FALSE xx. This improves
--
1.8.3.1
